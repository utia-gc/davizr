% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{clean_matrix_colnames}
\alias{clean_matrix_colnames}
\title{Clean the column names of a matrix}
\usage{
clean_matrix_colnames(m, pattern, replacement = "")
}
\arguments{
\item{m}{A matrix.}

\item{pattern}{Pattern to look for.

The default interpretation is a regular expression, as described
in \link[stringi:about_search_regex]{stringi::about_search_regex}. Control options with
\code{\link[stringr:regex]{regex()}}.

For \code{str_replace_all()} this can also be a named vector
(\code{c(pattern1 = replacement1)}), in order to perform multiple replacements
in each element of \code{string}.

Match a fixed string (i.e. by comparing only bytes), using
\code{\link[stringr:fixed]{fixed()}}. This is fast, but approximate. Generally,
for matching human text, you'll want \code{\link[stringr:coll]{coll()}} which
respects character matching rules for the specified locale.}

\item{replacement}{The replacement value, usually a single string,
but it can be the a vector the same length as \code{string} or \code{pattern}.
References of the form \verb{\\1}, \verb{\\2}, etc will be replaced with
the contents of the respective matched group (created by \verb{()}).

Alternatively, supply a function, which will be called once for each
match (from right to left) and its return value will be used to replace
the match.}
}
\value{
Matrix with cleaned column names.
}
\description{
A thin wrapper around \code{stringr::str_replace_all()} to clean matrix column names.
}
